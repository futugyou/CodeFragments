
using System.ComponentModel;
using System.Text.Json.Serialization;

namespace AspnetcoreEx.KernelService.Tools;


public static class Prompts
{
    public static string BuildSystemPrompt(string instruction = "", string example = "", string pydanticSchema = "")
    {
        string delimiter = "\n\n---\n\n";
        string schema = $"Your answer should be in JSON and strictly follow this schema, filling in the fields in the order they are given:\n```\n{pydanticSchema}\n```";

        if (!string.IsNullOrWhiteSpace(example))
        {
            example = delimiter + example.Trim();
        }

        if (!string.IsNullOrWhiteSpace(pydanticSchema))
        {
            schema = delimiter + schema.Trim();
        }
        else
        {
            schema = "";
        }

        return instruction.Trim() + schema + example;
    }

    public static class RephrasedQuestionsPrompt
    {
        private const string instruction = """
You are a question rephrasing system.
Your task is to break down a comparative question into individual questions for each company mentioned.
Each output question must be self-contained, maintain the same intent and metric as the original question, be specific to the respective company, and use consistent phrasing.
""";

        private const string pydanticSchema = @"
class RephrasedQuestion(BaseModel):
    """"Individual question for a company""""
    company_name: str = Field(description=""Company name, exactly as provided in quotes in the original question"")
    question: str = Field(description=""Rephrased question specific to this company"")

class RephrasedQuestions(BaseModel):
    """"List of rephrased questions""""
    questions: List['RephrasedQuestionsPrompt.RephrasedQuestion'] = Field(description=""List of rephrased questions for each company"")
";

        private const string example = @"
Example:
Input:
Original comparative question: 'Which company had higher revenue in 2022, ""Apple"" or ""Microsoft""?'
Companies mentioned: ""Apple"", ""Microsoft""

Output:
{
    ""questions"": [
        {
            ""company_name"": ""Apple"",
            ""question"": ""What was Apple's revenue in 2022?""
        },
        {
            ""company_name"": ""Microsoft"", 
            ""question"": ""What was Microsoft's revenue in 2022?""
        }
    ]
}
";

        public const string UserPrompt = "Original comparative question: '{0}'\n\nCompanies mentioned: {1}";
        public static readonly string SystemPrompt = BuildSystemPrompt(instruction, example);
        public static readonly string SystemPromptWithSchema = BuildSystemPrompt(instruction, example, pydanticSchema);
    }

    public static class AnswerWithRAGContextSharedPrompt
    {
        public const string Instruction = """
You are a RAG (Retrieval-Augmented Generation) answering system.
Your task is to answer the given question based only on information from the company's annual report, which is uploaded in the format of relevant pages extracted using RAG.

Before giving a final answer, carefully think out loud and step by step. Pay special attention to the wording of the question.
- Keep in mind that the content containing the answer may be worded differently than the question.
- The question was autogenerated from a template, so it may be meaningless or not applicable to the given company.
""";


        public const string UserPrompt = """
Here is the context:
\"\"\"
{0}
\"\"\"

---

Here is the question:
"{1}"
""";
    }

    public static class AnswerWithRAGContextNamePrompt
    {
        private const string instruction = AnswerWithRAGContextSharedPrompt.Instruction;

        private const string pydanticSchema = @"
class AnswerSchema(BaseModel):
    step_by_step_analysis: str = Field(description=""Detailed step-by-step analysis of the answer with at least 5 steps and at least 150 words. Pay special attention to the wording of the question to avoid being tricked. Sometimes it seems that there is an answer in the context, but this is might be not the requested value, but only a similar one."")

    reasoning_summary: str = Field(description=""Concise summary of the step-by-step reasoning process. Around 50 words."")

    relevant_pages: List[int] = Field(description=\""""
List of page numbers containing information directly used to answer the question. Include only:
- Pages with direct answers or explicit statements
- Pages with key information that strongly supports the answer
Do not include pages with only tangentially related information or weak connections to the answer.
At least one page should be included in the list.
\"""")

    final_answer: Union[str, Literal[""N/A""]] = Field(description=\""""
If it is a company name, should be extracted exactly as it appears in question.
If it is a person name, it should be their full name.
If it is a product name, it should be extracted exactly as it appears in the context.
Without any extra information, words or comments.
- Return 'N/A' if information is not available in the context
\"""")
";

        private const string example = """
Example:
Question: 
"Who was the CEO of 'Southwest Airlines Co.'?" 

Answer: 
```
{
  "step_by_step_analysis": "1. The question asks for the CEO of 'Southwest Airlines Co.'. The CEO is typically the highest-ranking executive responsible for the overall management of the company, sometimes referred to as the President or Managing Director.\n2. My source of information is a document that appears to be 'Southwest Airlines Co.''s annual report. This document will be used to identify the individual holding the CEO position.\n3. Within the provided document, there is a section that identifies Robert E. Jordan as the President & Chief Executive Officer of 'Southwest Airlines Co.'. The document confirms his role since February 2022.\n4. Therefore, based on the information found in the document, the CEO of 'Southwest Airlines Co.' is Robert E. Jordan.",
  "reasoning_summary": "'Southwest Airlines Co.''s annual report explicitly names Robert E. Jordan as President & Chief Executive Officer since February 2021. This directly answers the question.",
  "relevant_pages": [58],
  "final_answer": "Robert E. Jordan"
}
```
""";

        public const string UserPrompt = AnswerWithRAGContextSharedPrompt.UserPrompt;
        public static readonly string SystemPrompt = BuildSystemPrompt(instruction, example);
        public static readonly string SystemPromptWithSchema = BuildSystemPrompt(instruction, example, pydanticSchema);


    }

    public static class AnswerWithRAGContextNumberPrompt
    {
        private const string instruction = AnswerWithRAGContextSharedPrompt.Instruction;
        public const string UserPrompt = AnswerWithRAGContextSharedPrompt.UserPrompt;
        public const string SystemPrompt = "TODO";
        public const string SystemPromptWithSchema = "TODO";
        public static readonly object AnswerSchema = new { Number = "int" };
    }

    public static class AnswerWithRAGContextBooleanPrompt
    {
        public const string SystemPrompt = "TODO";
        public const string SystemPromptWithSchema = "TODO";
        public const string UserPrompt = "TODO";
        public static readonly object AnswerSchema = new { IsTrue = "bool" };
    }

    public static class AnswerWithRAGContextNamesPrompt
    {
        public const string SystemPrompt = "TODO";
        public const string SystemPromptWithSchema = "TODO";
        public const string UserPrompt = "TODO";
        public static readonly object AnswerSchema = new { Names = "List<string>" };
    }

    public static class ComparativeAnswerPrompt
    {
        public const string SystemPrompt = "TODO";
        public const string SystemPromptWithSchema = "TODO";
        public const string UserPrompt = "TODO";
        public static readonly object AnswerSchema = new { ComparisonResult = "string" };
    }
}

/// <summary>
/// Individual question for a company
/// </summary>
public class RephrasedQuestion
{
    [JsonPropertyName("company_name")]
    [Description("Company name, exactly as provided in quotes in the original question")]
    public string CompanyName { get; set; }

    [JsonPropertyName("question")]
    [Description("Rephrased question specific to this company")]
    public string Question { get; set; }
}

/// <summary>
/// List of rephrased questions
/// </summary>
public class RephrasedQuestions
{
    [JsonPropertyName("questions")]
    [Description("List of rephrased questions for each company")]
    public List<RephrasedQuestion> Questions { get; set; }
}

/// <summary>
/// Rank retrieved text block relevance to a query.
/// </summary>
public class RetrievalRankingSingleBlock
{
    [JsonPropertyName("reasoning")]
    [Description("Analysis of the block, identifying key information and how it relates to the query")]
    public string Reasoning { get; set; }

    [JsonPropertyName("relevance_score")]
    [Description("Relevance score from 0 to 1, where 0 is Completely Irrelevant and 1 is Perfectly Relevant")]
    public double RelevanceScore { get; set; }
}

/// <summary>
/// Rank retrieved multiple text blocks relevance to a query.
/// </summary>
public class RetrievalRankingMultipleBlocks
{
    [JsonPropertyName("block_rankings")]
    [Description("A list of text blocks and their associated relevance scores.")]
    public List<RetrievalRankingSingleBlock> BlockRankings { get; set; }
}

public class NameAnswerSchema
{
    [JsonPropertyName("step_by_step_analysis")]
    [Description("Detailed step-by-step analysis of the answer with at least 5 steps and at least 150 words. Pay special attention to the wording of the question to avoid being tricked. Sometimes it seems that there is an answer in the context, but this is might be not the requested value, but only a similar one.")]
    public string StepByStepAnalysis { get; set; }

    [JsonPropertyName("reasoning_summary")]
    [Description("Concise summary of the step-by-step reasoning process. Around 50 words.")]
    public string ReasoningSummary { get; set; }

    [JsonPropertyName("relevant_pages")]
    [Description("""
List of page numbers containing information directly used to answer the question. Include only:
- Pages with direct answers or explicit statements
- Pages with key information that strongly supports the answer
Do not include pages with only tangentially related information or weak connections to the answer.
At least one page should be included in the list.
""")]
    public List<int> RelevantPages { get; set; }

    [JsonPropertyName("final_answer")]
    [Description("""
If it is a company name, should be extracted exactly as it appears in question.
If it is a person name, it should be their full name.
If it is a product name, it should be extracted exactly as it appears in the context.
Without any extra information, words or comments.
- Return 'N/A' if information is not available in the context
""")]
    public string FinalAnswer { get; set; }
}